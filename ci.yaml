trigger:
  branches:
    exclude: 
    - u/*
pr:
  branches:
    include:
    - main

jobs:
- job: Build
  strategy:
    matrix:
      Win-x64-Release:
        imageName: 'VSEng-MicroBuildVS2019'
        _configuration: Release
        _Use32Bit: false
        _platform: x64
      Win-x32-Release:
        imageName: 'VSEng-MicroBuildVS2019'
        _configuration: Release
        _Use32Bit: true
        _platform: x86
  pool:
    vmImage: $(imageName)
  steps:
    - task: MicroBuildSigningPlugin@3
      displayName: Install signing plugin
      inputs:
        signType: $(SigningType)
        feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'
      condition: and(succeeded(), eq(variables['SigningType'], 'real'), eq(variables['_platform'], 'x64'))
      
    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        feedsToUse: 'config'
        nugetConfigPath: 'NuGet.config'
      condition: succeeded()
      displayName: "Restore"
    
    - task: DotNetCoreCLI@2
      inputs:
        command: 'custom'
        custom: 'msbuild'
        arguments: '-property:Configuration=$(_configuration)
                    -property:_Use32Bit=$(_Use32Bit)
                    -property:DotNetFinalVersionKind=release
                    -bl:./artifacts/log/$(_configuration)/Build.binlog'
      condition: succeeded()
      displayName: Build

    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: 'test'
        publishTestResults: true
        arguments: '--collect "Code coverage"
                    --no-build
                    -c $(_configuration)
                    --settings "CodeCoverage.runsettings"'
        projects: '**/*.Test.csproj'
      condition: succeeded()
      env:
        GRANTSETFIXSASTOKEN2: $(GRANTSETFIXSASTOKEN2)
    
    - task: DotNetCoreCLI@2
      inputs:
        command: 'custom'
        custom: 'pack'
        arguments: '-c $(_configuration)
                    --no-build
                    -property:DotNetFinalVersionKind=release'
      displayName: Pack
      condition: succeeded()

    # Should always run
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(_configuration)'
        ArtifactName: '$(imageName) $(_platform) $(_configuration) log folder'
        publishLocation: Container
      condition: true
      continueOnError: true

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/artifacts/Packages/$(_configuration)/'
        ArtifactName: '$(imageName) $(_platform) $(_configuration) packages folder'
        publishLocation: Container
      displayName: Publish packages folder
      continueOnError: true
      condition: eq(variables['_configuration'], 'Release')
